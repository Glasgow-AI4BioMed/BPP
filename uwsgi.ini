[uwsgi]

# 启动程序时所使用的ip和端口号
# The ip and port number used to start the program
socket = 127.0.0.1:8080

# Project catalogue
# chdir = /home/reactome_visual/PathwayGNN_Visual
# chdir = /home/xinhaoyi/BPP
chdir = /home/ubuntu/xinhao/BPP

# The flask application's startup file,
# which is usually run locally by running python manage.py runserver to start the project
wsgi-file = run.py

# The name of the application variable enabled within the program
callable = app

# Start the main process
master = true

# Master process id file directory
# pidfile = /home/reactome_visual/PathwayGNN_Visual/uwsgi.pid
# pidfile = /home/xinhaoyi/BPP/uwsgi.pid
pidfile = /home/ubuntu/xinhao/BPP/uwsgi.pid

# Configure the virtual environment path
# virtualenv = /home/python_envs/flask_env
virtualenv = /home/ubuntu/bpp-envs

# Start 4 sub-processes to handle requests
process = 4

# Enable threads
enable-threads = true


# Threads started in each auxiliary process
threads = 4


# Set self-interrupt time to set the timeout (in seconds) for a request,
# if a request exceeds this time, the request is discarded
harakiri = 30


# When a request is killed by harakiri, a log will be output
# harakiri-verbose = true


# Turn on memory usage reporting
memory-report = true

# Set the long wait time (in seconds) for a smooth restart (until the incoming request has been processed)
reload-mercy = 10

# This port allows you to monitor the load on uwsgi
# stats = 127.0.0.1:8387

# Clean up the environment on exit
vacuum = true

# Increase buffer size to handle larger requests
buffer-size = 65535

logto = /var/log/uwsgi/uwsgi.log

daemonize = /var/log/uwsgi/uwsgi-daemon.log

# disable-logging stop outputting request log.
# When true: disable-logging disables all request logging, no request log information will be printed.
# When it is false: enable all request logs, they will be stored in the file specified by daemonize.
# disable-logging=false
# daemonize = /home/xinhaoyi/BPP_log/uwsgi.log


