[uwsgi]

# 启动程序时所使用的ip和端口号
# The ip and port number used to start the program
socket = 127.0.0.1:8000

# 项目目录
# Project catalogue
chdir = /home/reactome_visual/PathwayGNN_Visual

# flask程序的启动文件，通常在本地是通过运行 python manage.py runserver 来启动项目的
# The flask application's startup file,
# which is usually run locally by running python manage.py runserver to start the project
wsgi-file = run.py

# 程序内启用的application变量名
# The name of the application variable enabled within the program
callable = app

# 启动主进程
# Start the main process
master = true

# 主进程id文件目录
# Master process id file directory
pidfile = /home/reactome_visual/PathwayGNN_Visual/uwsgi.pid

# 配置虚拟环境路径
virtualenv = /home/python_envs/flask_env

# 启动4个子进程处理请求
# Start 4 sub-processes to handle requests
process = 4

# 启用线程
# Enable threads
enable-threads = true

# 在每个辅助进程中启动的线程数
# of threads started in each auxiliary process
threads = 4


# 设置自中断时间，设置一个请求的超时时间(秒)，如果一个请求超过了这个时间，则请求被丢弃
# Set self-interrupt time to set the timeout (in seconds) for a request,
# if a request exceeds this time, the request is discarded
harakiri = 30

# 当一个请求被harakiri杀掉会，会输出一条日志
# When a request is killed by harakiri, a log will be output
# harakiri-verbose = true


# 开启内存使用情况报告
# Turn on memory usage reporting
memory-report = true

# 设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
# Set the long wait time (in seconds) for a smooth restart (until the incoming request has been processed)
reload-mercy = 10

# 通过该端口可以监控 uwsgi 的负载情况
# This port allows you to monitor the load on uwsgi
stats = 127.0.0.1:8387

# 退出的时候清理环境
# Clean up the environment on exit
vacuum = true

# disable-logging停止输出request log，
# 当是true 时：表示关闭所有请求日志，就不会打印请求日志信息了
# 当是false时：表示开启所有请求日志，日志会存到daemonize指定的文件中
# disable-logging=false
# daemonize = /home/reactome_visual/PathwayGNN_Visual/log/uwsgi.log


